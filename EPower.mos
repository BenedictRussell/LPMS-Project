model EPowerModel
  uses "mmxprs"


  declarations
    Emiss: set of string
    Source:	set of string
    Times:	set of integer
    PeriodLength:	array(Times) of integer
    Demand:		array(Times) of real
    MaxOutput:  array(Source) of real
    RunningCost:    array(Source) of real
    IncreaseCost:   array(Source) of real
    Emissions:    array(Emiss, Source) of real
    EmissionsLimit: array(Emiss) of real
    ElectricityPrice:	real
    MaxHydroReserve:	real
    NaturalHydroInflow:		real
    HydroPowerEfficiencyFrac:	real
    PowerOutput: array(Source, Times) of mpvar
    IncreasedOutput: array(Source, Times) of mpvar
    PumpDemand: array(Times) of mpvar
    HydroReservePower: array(Times) of mpvar
    EmissionFactor: array(Emiss) of real
    Limit: real
    SolarOutput: array(Times) of real
  end-declarations

  initialisations from "EPower.dat"
    Emiss Source Times PeriodLength Demand MaxOutput RunningCost
    IncreaseCost Emissions EmissionsLimit ElectricityPrice MaxHydroReserve NaturalHydroInflow
    HydroPowerEfficiencyFrac SolarOutput
  end-initialisations

  ! Constraint on maximum power output per source
  forall(s in Source, t in Times)
    OutputCS(s,t) := PowerOutput(s,t) <= MaxOutput(s)

  ! The running cost per time period
  forall(t in Times)
    RunCost(t) :=  PeriodLength(t)*sum(s in Source) RunningCost(s)*PowerOutput(s,t)

  ! Total running cost
  TotalRunningCost := sum(t in Times) RunCost(t)

  ! The increase cost
  forall(s in Source, t in Times) do
    if t=1 then
      WrapAroundIncreaseCS(s,t) := IncreasedOutput(s,t) >= PowerOutput(s,t) - PowerOutput(s,6)
    else
      IncreaseCS(s,t):= IncreasedOutput(s,t) >= PowerOutput(s,t) - PowerOutput(s,t-1)
    end-if
    NonnegativeIncreaseCS(s,t) := IncreasedOutput(s,t) >= 0
  end-do

  ! The total cost of increasing output
  TotalIncreaseCost := sum(t in Times, s in Source) IncreasedOutput(s,t)*IncreaseCost(s)

  ! Emission Constraints
  forall(e in Emiss)
    EmissionCS(e) := sum(s in Source, t in Times) Emissions(e,s)*PowerOutput(s,t)*PeriodLength(t) <= EmissionsLimit(e)*EmissionFactor(e)


  ! Demand Constraints

  ! Power Output per period
  forall(t in Times)
    PeriodPowerOutputRate(t) := sum(s in Source) PowerOutput(s,t)


  ! Demand per period
  forall(t in Times)
    DemandCS(t) := PeriodPowerOutputRate(t) - PumpDemand(t) = Demand(t)


  ! Hydro Storage capacity

  forall(t in Times) do
    if t=1 then
      HydroCS(t) := HydroReservePower(t) = HydroReservePower(6) + PeriodLength(t)*(PumpDemand(t)*HydroPowerEfficiencyFrac + NaturalHydroInflow - PowerOutput("Hydro",t))
    else
      HydroCS(t) := HydroReservePower(t) = HydroReservePower(t-1) + PeriodLength(t)*(PumpDemand(t)*HydroPowerEfficiencyFrac + NaturalHydroInflow - PowerOutput("Hydro",t))
    end-if

    MaxHydroReserveCS(t) := HydroReservePower(t) <= MaxHydroReserve
    HydroReservePower(t) >= 0
  end-do



  ! Define Revenue
  Revenue := sum(t in Times) (PeriodPowerOutputRate(t) - PumpDemand(t))*PeriodLength(t)*ElectricityPrice

  ! Objective Function: Profit
  Profit := Revenue - TotalRunningCost - TotalIncreaseCost

  maximise(Profit)


  fopen("EPower2.csv", F_OUTPUT)
  
  writeln("BASE CASE SOLUTIONS")
  writeln
  writeln("The Total Profit is ", getsol(Profit))
  writeln("The total revenue is ", getsol(Revenue))
  writeln("The total running cost is ", getsol(TotalRunningCost))
  writeln("The total increasing cost is ", getsol(TotalIncreaseCost))
  writeln

  writeln("This correponds to the power sources running at the below hourly rates over a day")
  write("Sources")
  forall(s in Source) write(",", s)
  writeln
  TimeOfDay := 0
  forall(t in Times) do
    forall(i in 1..PeriodLength(t)) do
        write(TimeOfDay)
        forall(s in Source) write(",", getsol(PowerOutput(s,t)))
      writeln
      TimeOfDay := TimeOfDay + 1
      end-do
  end-do
  writeln
  
  
  writeln("The total power ouput for each period is")
  forall(t in Times)
    writeln(t,",", getsol(PeriodPowerOutputRate(t)))
  writeln

  writeln("The increase of output matrix is")
  forall(t in Times) do
    write("Period ", t)
    forall(s in Source) write(",", getsol(IncreasedOutput(s,t)))
    writeln
  end-do
  writeln
  
  writeln("The total power output for each source across our day is")
  forall(s in Source) do
    writeln(s, ",", sum(t in Times) PeriodLength(t)*getsol(PowerOutput(s,t)))
  end-do
  writeln

  writeln("The amount of potential energy in the reserve in each period is ")
  forall(t in Times)
    writeln(t,",", getsol(HydroReservePower(t)))


  writeln("The rate of water pump into the reserve as potential energy in each period is ")
  forall(t in Times)
    writeln(t,",", getsol(PumpDemand(t)))
  writeln
    
  writeln("THE SLACK ON THE CONSTRAINTS FOR THE BASE CASE:")
  writeln
    
  forall(e in Emiss) do
    writeln("The slack on the ", Emiss(e),  " constraint is ", getslack(EmissionCS(e)))
    if getslack(EmissionCS(e)) = 0 then
      writeln("This corresponds to a fair price of ", Emiss(e), " of ", getdual(EmissionCS(e)))
    end-if
  end-do
  writeln
  
  writeln("The sources and time periods where the slack on the maximum output constraint is zero and the corresponding fairprice")
  forall(s in Source, t in Times) do
    if getslack(OutputCS(s,t)) = 0 then
      writeln(Source(s), " in time period ", Times(t), " has fair price ", getdual(OutputCS(s,t)))
    end-if
  end-do
  
  forall(t in Times) do
    if getslack(MaxHydroReserveCS(t)) = 0 then
      writeln("For time period ", t, " the fair price for increasing size of the hydro reserve ", getslack(HydroCS(t)))
    end-if
  end-do
  writeln

  forall(t in Times) do
    if getslack(DemandCS(t)) <> 0 then
      writeln("For time period ", t, " the demand is not met. The slack on the demand constraint is ", getslack(DemandCS(t)))
    end-if
  end-do
  writeln
    
  writeln("CUTTING CO2 EMISSIONS BY UP TO 50% AND USING HYDRO POWER")
  writeln

  Limit := 1
  write("Limit",",","Profit",",")
  forall(s in Source) write(",",s)
  writeln
  repeat

  EmissionCS(Emiss(2)) := sum(s in Source, t in Times) Emissions(Emiss(2),s)*PowerOutput(s,t)*PeriodLength(t) <= EmissionsLimit(Emiss(2))*Limit

  maximize(Profit)

	write(Limit)
	write(",", getsol(Profit))
	write(",")
	forall(s in Source) do
     TotalUsed := sum(t in Times) getsol(PowerOutput(s,t))
     write(",",TotalUsed)
  end-do
  writeln
	Limit := Limit - .01

  until Limit < .5

  writeln

  forall(t in Times)
    PeriodPowerOutputRate(t) := sum(s in Source) PowerOutput(s,t) + SolarOutput(t)

 ! Demand per period
  forall(t in Times)
    DemandCS(t) := PeriodPowerOutputRate(t) - PumpDemand(t) = Demand(t)

 ! Define Revenue
  Revenue := sum(t in Times) (PeriodPowerOutputRate(t) - PumpDemand(t))*PeriodLength(t)*ElectricityPrice

  ! Objective Function: Profit
  Profit := Revenue - TotalRunningCost - TotalIncreaseCost

  maximize(Profit)
  
  writeln("RESULTS FOR 50% CO2 AND USE OF SOLAR POWER")
  writeln("The Total Profit is ", getsol(Profit))
  writeln("The total revenue is ", getsol(Revenue))
  writeln("The total running cost is ", getsol(TotalRunningCost))
  writeln("The total increasing cost is ", getsol(TotalIncreaseCost))
  writeln

  writeln
  writeln("This correponds to the power sources running at the below hourly rates at each time of day")
  write("Sources")
  forall(s in Source) write(",", s)
  write(",", "Solar")
  writeln
  
  TimeOfDay := 0
  forall(t in Times) do
    forall(i in 1..PeriodLength(t)) do
        write(TimeOfDay)
        forall(s in Source) write(",", getsol(PowerOutput(s,t)))
        write(",",SolarOutput(t)) 
      writeln
      TimeOfDay := TimeOfDay + 1
      end-do
  end-do
  writeln
  
  writeln("CHECKING WHERE SLACK IS ZERO IN STAGE 2")
  
  forall(e in Emiss) do
    writeln("The slack on the ", Emiss(e),  " constraint is ", getslack(EmissionCS(e)))
    writeln("This corresponds to a dual value ", getdual(EmissionCS(e)))
  end-do
  writeln
  
  writeln("The sources and time periods where the slack on the maximum output constraint is zero and the corresponding fairprice")
  forall(s in Source, t in Times) do
    if getslack(OutputCS(s,t)) = 0 then
      writeln(Source(s), " in time period ", Times(t), " has fair price ", getdual(OutputCS(s,t)))
    end-if
  end-do
  
  forall(t in Times) do
    if getslack(MaxHydroReserveCS(t)) = 0 then
      writeln("For time period ", t, " the fair price for increasing size of the hydro reserve ", getdual(HydroCS(t)))
    end-if
  end-do
  writeln

  forall(t in Times) do
    if getslack(DemandCS(t)) <> 0 then
      writeln("For time period ", t, " the demand is not met. The slack on the demand constraint is ", getslack(DemandCS(t)))
    end-if
  end-do
  writeln
  
  writeln("MODEL WITHOUT GAS")
  

  fclose(F_OUTPUT)
end-model

